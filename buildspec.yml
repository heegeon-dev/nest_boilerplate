version: 0.2

phases:
  # install : 실행 환경 지정 및 kubectl 설치, .kubeconfig 구성
  # install:
  #   runtime-versions:
  #   docker: 19
  #   commands:
  #     - echo Install Kubectl
  #     - echo ---------------------------------
  #     - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl
  #     - chmod +x ./kubectl
  #     - mv ./kubectl /usr/local/bin/kubectl
  #     - mkdir ~/.kube
  #     - aws sts get-caller-identity
  #     - aws eks --region ap-northeast-2 update-kubeconfig --name EKS-Cluster
  #     - echo ---------------------------------

  # pre_build : Docker ECR 저장소 로그인
  pre_build:
    commands:
      - echo ENV Values
      - echo ---------------------------------
      - echo $AWS_DEFAULT_REGION
      - echo $AWS_ACCOUNT_ID
      - echo $IMAGE_REPO_NAME
      - echo $NODE_ENV
      - echo $CODEBUILD_BUILD_NUMBER
      - echo ---------------------------------

  # build : 빌드 작업 수행, Docker Build(이미지 생성) 및 태그 지정, ECR Push(이미지 업로드), imagedefinitions.json 만들기
  build:
    commands:
      - echo Build started on `date`
      - echo Application Build
      - echo ---------------------------------
      - echo Build Start
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker build -t $IMAGE_REPO_NAME:$NODE_ENV-$CODEBUILD_BUILD_NUMBER .
      - docker images
      - docker tag $IMAGE_REPO_NAME:$NODE_ENV-$CODEBUILD_BUILD_NUMBER $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$NODE_ENV-$CODEBUILD_BUILD_NUMBER
      - docker logout
      - echo ---------------------------------
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - echo ---------------------------------
      - echo Pushing the Docker image at $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$NODE_ENV-$CODEBUILD_BUILD_NUMBER...
      - echo ---------------------------------
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$NODE_ENV-$CODEBUILD_BUILD_NUMBER
      # - printf '[{"name":"cicd-demo","imageUri":"%s"}]' $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$NODE_ENV > imagedefinitions.json 
      - printf $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$NODE_ENV-$CODEBUILD_BUILD_NUMBER > imagedefinitions.json 
  
  # post_build : EKS 배포 수행
  # post_build:
  #   commands:
  #     - AWS_ECR_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$NODE_ENV-$CODEBUILD_BUILD_NUMBER
  #     - DATE=`date`
  #     - echo Build completed on $DATE
  #     - sed -i 's#AWS_ECR_URI#'"$AWS_ECR_URI"'#' ./eks-app-deploy.yml
  #     - kubectl apply -f ./eks-app-deploy.yml

artifacts: 
  files:  
    - 'imagedefinitions.json'
    - 'scripts/*'
    - 'appspec.yml'